1.定位
  1.绝对定位
    使用场合：
      1.有堆叠效果的元素
      2.弹出菜单
    注意：
      1.脱离文档流，不占页面空间
      2.元素一旦定义绝对定位义以后将变为块级元素（修改其尺寸）
      3.绝对定位是相对于离他最近的已定位的（相对，绝对，固定）父元素去实现位置的初始化
  2.固定定位
   属性：
     position:fixed;
   配合偏移属性（top/bottom/left/right）
   注意：
      1.固定定位的元素永远都是相对于body去实现位置的初始化和偏移。
      2.固定定位的元素变成块级元素
      3.脱离文档流-不占页面空间
  3.堆叠顺序
   一旦将元素变为已定位的元素后，元素则有可能会出现堆叠效果。
   想要改变默认的堆叠顺序？
   属性：z-index
   取值：无单位的数字，数字越大越靠上
   注意：
       1、父子元素之间：z-index无效，永远子元素压在父元素上。
       2.只有已定位元素才能使用z-index改变堆叠顺序。
   练习：
     新建一个div元素id为d1,在d1中嵌套一个div元素id为d2,分别设置背景，并且都做绝对定位。然后尝试改变两个div的堆叠顺序。
=============================
2.CSS3 Core(核心)
  1.复杂选择器
    1.兄弟选择器
      兄弟元素：具备相同父级的平级元素称为兄弟元素。
      1.相邻兄弟选择器
        作用：获取紧紧挨在某元素后的兄弟元素
	语法：选择器1+选择器2{样式声明}
        注意：兄弟选择器只能从前向后找元素
      2.通用兄弟选择器
        作用：获取某元素后所有满足条件的兄弟元素。
	语法：选择器1~选择器2{}

	练习：
	  <h3>静夜思</h3>
	 <div>窗前明月光</div>
	 <div>疑是地上霜</div>
	 <div>举头望明月</div>
	 <div>低头思故乡</div>
	 通过兄弟选择器设置如下样式：
	    1.h3与div之间有30px的外边距
	    2.从第二个div开始，每个div都有10px的上外边距
    2.属性选择器
      <input id="uname" name="uname" type="text" value="张三" class="" style=""> 
      作用：允许通过元素所附带的属性及其值匹配页面的元素。
      语法：
         1.基本语法
	   [attr] 
	   作用：匹配页面中所有附带attr属性的元素。
	   ex:
	     [id] 匹配页面中所有附带id属性的元素
 	 2.elem[attr]
	   作用：匹配页面中所有附带attr属性的elem元素
	   ex:
	     div[id] 匹配页面中所有附带id属性的div元素
	 3.[attr1][attr2]
	   作用：匹配同时附带多个属性的元素
	   ex:
	    [id][value] 匹配同时附带id属性和value属性的元素
	 4.[attr=value]
	   作用：匹配attr属性值为value的元素
	   ex：
	     [name="uname"] 匹配name属性值为uname的元素
	  练习：匹配页面中所有的文本框,将背景颜色设为灰色
	    <input type="text">
	    <input type="text">	
	    <input type="checkbox">
	    <input type="button" value="提交">

	    input[type=text]{
               background:gray;
            }
	    input[type="text"]{
               background:gray;
            }
	    input[type='text']{
               background:gray;
            }
	    以上三种写法均可
    3.伪类选择器
      1.已经学过
        1.链接伪类
	  :link 链接访问前的状态
	  :visited 链接访问后的状态
	2.动态伪类
	  :hover 鼠标悬停在元素上的状态
	  :active 激活状态
	  :focus 获取焦点状态
      2.新的伪类
        1.目标伪类
	  作用：突出显示活动的HTML锚点元素，匹配被激活的锚点
	  语法：
	    选择器:target{...}
	    div:target{color:red;}
	2.结构伪类
	  作用：通过元素的结构关系来匹配元素（上下嵌套结构）
	  <div>
	    <p>第一个段落</p>
	    <p>第二个段落</p>
	    <p>第三个段落</p>
	  </div>
	  语法：
	    1.:first-child
	      匹配的元素是属于其父元素的第一个子元素。
	    2.:last-child
	      匹配的元素是属于其父元素的最后一个子元素。
	    3.:nth-child(n)
	      匹配的元素是属于父元素中第n个子元素

	      练习：
	      1.创建一个4*4表格，并填充内容
	      2.设置第一行数据的背景颜色为黄色
	      3.设置最后一行数据的背景颜色为红色
	      4.第二行数据的背景颜色为蓝色
	      5.尝试写出第二行第3列的背景颜色改为pink。
	    4.:empty
	       没有任何子元素的元素（空格换行都不能有）
	       <div></div>
	       <div> </div>//无法匹配
	       <div> 
	       </div>//无法匹配
	    5.:only-child
	      匹配的元素是属于其父元素中的唯一子元素
	      ex：
	        p:only-child{color:red;}
	      <div>
	        <p>1111</p>//改变当前元素颜色
	      </div>
	       <div>
	        <p>1111</p>
		<p>2222</p>
	       </div>
        3.否定伪类
	  将满足指定条件选择器的元素给排除去
	  语法：:not(selector){}
	  ex:
	  table tr:not(first-child){color:red;}
	  除第一行以外所有的行文字颜色为红色

	  练习：
	    设置每行中除了第一列以外的所有列文字以加粗和斜体的方式显示。
    4.伪元素选择器
      1.:first-letter或 ::first-letter
        作用：匹配元素的首字符
      2.:first-line或 ::first-line
        作用：匹配元素的首行
        注意：当伪元素选择器中首字符和首行效果相冲突时，首字符优先。
      3.::selection
        作用：匹配被用户选取的内容
	注意：只能修改文本的背景颜色和字体颜色
   
   课后练习：
      完成Day05文件夹中"作业.png"布局效果
        
        
